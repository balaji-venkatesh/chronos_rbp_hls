// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rbp_hls_rbp_hls_Pipeline_VITIS_LOOP_487_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_l1_AWVALID,
        m_axi_l1_AWREADY,
        m_axi_l1_AWADDR,
        m_axi_l1_AWID,
        m_axi_l1_AWLEN,
        m_axi_l1_AWSIZE,
        m_axi_l1_AWBURST,
        m_axi_l1_AWLOCK,
        m_axi_l1_AWCACHE,
        m_axi_l1_AWPROT,
        m_axi_l1_AWQOS,
        m_axi_l1_AWREGION,
        m_axi_l1_AWUSER,
        m_axi_l1_WVALID,
        m_axi_l1_WREADY,
        m_axi_l1_WDATA,
        m_axi_l1_WSTRB,
        m_axi_l1_WLAST,
        m_axi_l1_WID,
        m_axi_l1_WUSER,
        m_axi_l1_ARVALID,
        m_axi_l1_ARREADY,
        m_axi_l1_ARADDR,
        m_axi_l1_ARID,
        m_axi_l1_ARLEN,
        m_axi_l1_ARSIZE,
        m_axi_l1_ARBURST,
        m_axi_l1_ARLOCK,
        m_axi_l1_ARCACHE,
        m_axi_l1_ARPROT,
        m_axi_l1_ARQOS,
        m_axi_l1_ARREGION,
        m_axi_l1_ARUSER,
        m_axi_l1_RVALID,
        m_axi_l1_RREADY,
        m_axi_l1_RDATA,
        m_axi_l1_RLAST,
        m_axi_l1_RID,
        m_axi_l1_RFIFONUM,
        m_axi_l1_RUSER,
        m_axi_l1_RRESP,
        m_axi_l1_BVALID,
        m_axi_l1_BREADY,
        m_axi_l1_BRESP,
        m_axi_l1_BID,
        m_axi_l1_BUSER,
        task_out_TREADY,
        CSR_position_V,
        CSC_position_V,
        CSR_end_V,
        CSC_end_V,
        reverse_mid_V,
        base_reverse_edge_id_V_load,
        task_out_temp_ts_V_7,
        task_out_TDATA,
        task_out_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_l1_AWVALID;
input   m_axi_l1_AWREADY;
output  [31:0] m_axi_l1_AWADDR;
output  [0:0] m_axi_l1_AWID;
output  [31:0] m_axi_l1_AWLEN;
output  [2:0] m_axi_l1_AWSIZE;
output  [1:0] m_axi_l1_AWBURST;
output  [1:0] m_axi_l1_AWLOCK;
output  [3:0] m_axi_l1_AWCACHE;
output  [2:0] m_axi_l1_AWPROT;
output  [3:0] m_axi_l1_AWQOS;
output  [3:0] m_axi_l1_AWREGION;
output  [0:0] m_axi_l1_AWUSER;
output   m_axi_l1_WVALID;
input   m_axi_l1_WREADY;
output  [31:0] m_axi_l1_WDATA;
output  [3:0] m_axi_l1_WSTRB;
output   m_axi_l1_WLAST;
output  [0:0] m_axi_l1_WID;
output  [0:0] m_axi_l1_WUSER;
output   m_axi_l1_ARVALID;
input   m_axi_l1_ARREADY;
output  [31:0] m_axi_l1_ARADDR;
output  [0:0] m_axi_l1_ARID;
output  [31:0] m_axi_l1_ARLEN;
output  [2:0] m_axi_l1_ARSIZE;
output  [1:0] m_axi_l1_ARBURST;
output  [1:0] m_axi_l1_ARLOCK;
output  [3:0] m_axi_l1_ARCACHE;
output  [2:0] m_axi_l1_ARPROT;
output  [3:0] m_axi_l1_ARQOS;
output  [3:0] m_axi_l1_ARREGION;
output  [0:0] m_axi_l1_ARUSER;
input   m_axi_l1_RVALID;
output   m_axi_l1_RREADY;
input  [31:0] m_axi_l1_RDATA;
input   m_axi_l1_RLAST;
input  [0:0] m_axi_l1_RID;
input  [8:0] m_axi_l1_RFIFONUM;
input  [0:0] m_axi_l1_RUSER;
input  [1:0] m_axi_l1_RRESP;
input   m_axi_l1_BVALID;
output   m_axi_l1_BREADY;
input  [1:0] m_axi_l1_BRESP;
input  [0:0] m_axi_l1_BID;
input  [0:0] m_axi_l1_BUSER;
input   task_out_TREADY;
input  [31:0] CSR_position_V;
input  [31:0] CSC_position_V;
input  [31:0] CSR_end_V;
input  [31:0] CSC_end_V;
input  [31:0] reverse_mid_V;
input  [31:0] base_reverse_edge_id_V_load;
input  [31:0] task_out_temp_ts_V_7;
output  [199:0] task_out_TDATA;
output   task_out_TVALID;

reg ap_idle;
reg m_axi_l1_ARVALID;
reg m_axi_l1_RREADY;
reg task_out_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] or_ln487_reg_349;
reg   [0:0] icmp_ln1072_reg_345;
reg    ap_predicate_op48_readreq_state3;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
reg   [0:0] or_ln487_reg_349_pp0_iter8_reg;
reg   [0:0] icmp_ln1072_reg_345_pp0_iter8_reg;
reg    ap_predicate_op55_read_state10;
reg    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
reg   [0:0] icmp_ln1068_reg_379;
reg    ap_block_state12_pp0_stage0_iter11;
reg    ap_block_state12_io;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] or_ln487_fu_181_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    l1_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    l1_blk_n_R;
reg    task_out_TDATA_blk_n;
reg   [31:0] affected_mid_V_2_reg_145;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1072_fu_171_p2;
reg   [0:0] icmp_ln1072_reg_345_pp0_iter2_reg;
reg   [0:0] icmp_ln1072_reg_345_pp0_iter3_reg;
reg   [0:0] icmp_ln1072_reg_345_pp0_iter4_reg;
reg   [0:0] icmp_ln1072_reg_345_pp0_iter5_reg;
reg   [0:0] icmp_ln1072_reg_345_pp0_iter6_reg;
reg   [0:0] icmp_ln1072_reg_345_pp0_iter7_reg;
reg   [0:0] icmp_ln1072_reg_345_pp0_iter9_reg;
reg   [0:0] or_ln487_reg_349_pp0_iter2_reg;
reg   [0:0] or_ln487_reg_349_pp0_iter3_reg;
reg   [0:0] or_ln487_reg_349_pp0_iter4_reg;
reg   [0:0] or_ln487_reg_349_pp0_iter5_reg;
reg   [0:0] or_ln487_reg_349_pp0_iter6_reg;
reg   [0:0] or_ln487_reg_349_pp0_iter7_reg;
reg   [0:0] or_ln487_reg_349_pp0_iter9_reg;
wire   [31:0] add_ln232_fu_187_p2;
reg   [31:0] add_ln232_reg_353;
wire   [31:0] affected_mid_V_fu_203_p2;
reg   [31:0] l1_addr_read_reg_369;
wire   [0:0] ret_fu_238_p1;
reg   [0:0] ret_reg_374;
wire   [0:0] icmp_ln1068_fu_242_p2;
reg   [31:0] ap_phi_mux_affected_mid_V_2_phi_fu_148_p4;
wire   [31:0] ap_phi_reg_pp0_iter0_affected_mid_V_2_reg_145;
reg   [31:0] ap_phi_reg_pp0_iter1_affected_mid_V_2_reg_145;
reg   [31:0] ap_phi_reg_pp0_iter2_affected_mid_V_2_reg_145;
reg   [31:0] ap_phi_reg_pp0_iter3_affected_mid_V_2_reg_145;
reg   [31:0] ap_phi_reg_pp0_iter4_affected_mid_V_2_reg_145;
reg   [31:0] ap_phi_reg_pp0_iter5_affected_mid_V_2_reg_145;
reg   [31:0] ap_phi_reg_pp0_iter6_affected_mid_V_2_reg_145;
reg   [31:0] ap_phi_reg_pp0_iter7_affected_mid_V_2_reg_145;
reg   [31:0] ap_phi_reg_pp0_iter8_affected_mid_V_2_reg_145;
reg   [31:0] ap_phi_reg_pp0_iter9_affected_mid_V_2_reg_145;
reg   [31:0] ap_phi_reg_pp0_iter10_affected_mid_V_2_reg_145;
wire   [31:0] affected_mid_V_1_fu_231_p2;
reg   [31:0] CSC_position_V_1_fu_72;
wire   [31:0] CSC_position_V_4_fu_192_p2;
wire    ap_loop_init;
reg   [31:0] CSR_position_V_1_fu_76;
wire   [31:0] CSR_position_V_4_fu_209_p2;
reg   [127:0] out_args_fu_80;
wire   [127:0] out_args_2_fu_273_p3;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln1072_1_fu_176_p2;
wire   [31:0] shl_ln229_fu_226_p2;
wire   [31:0] select_ln498_fu_250_p3;
wire   [95:0] tmp_s_fu_263_p4;
wire   [31:0] reverse_affected_mid_fu_257_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_490;
reg    ap_condition_494;
reg    ap_condition_303;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_done_reg = 1'b0;
end

rbp_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            CSC_position_V_1_fu_72 <= CSC_position_V;
        end else if ((1'b1 == ap_condition_490)) begin
            CSC_position_V_1_fu_72 <= CSC_position_V_4_fu_192_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            CSR_position_V_1_fu_76 <= CSR_position_V;
        end else if ((1'b1 == ap_condition_494)) begin
            CSR_position_V_1_fu_76 <= CSR_position_V_4_fu_209_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((or_ln487_reg_349_pp0_iter9_reg == 1'd1) & (icmp_ln1072_reg_345_pp0_iter9_reg == 1'd0))) begin
            affected_mid_V_2_reg_145 <= affected_mid_V_1_fu_231_p2;
        end else if ((1'b1 == 1'b1)) begin
            affected_mid_V_2_reg_145 <= ap_phi_reg_pp0_iter10_affected_mid_V_2_reg_145;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_303)) begin
        if (((icmp_ln1072_fu_171_p2 == 1'd1) & (or_ln487_fu_181_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter2_affected_mid_V_2_reg_145 <= affected_mid_V_fu_203_p2;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_affected_mid_V_2_reg_145 <= ap_phi_reg_pp0_iter1_affected_mid_V_2_reg_145;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1072_fu_171_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln487_fu_181_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln232_reg_353 <= add_ln232_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln1068_reg_379 <= icmp_ln1068_fu_242_p2;
        icmp_ln1072_reg_345_pp0_iter2_reg <= icmp_ln1072_reg_345;
        icmp_ln1072_reg_345_pp0_iter3_reg <= icmp_ln1072_reg_345_pp0_iter2_reg;
        icmp_ln1072_reg_345_pp0_iter4_reg <= icmp_ln1072_reg_345_pp0_iter3_reg;
        icmp_ln1072_reg_345_pp0_iter5_reg <= icmp_ln1072_reg_345_pp0_iter4_reg;
        icmp_ln1072_reg_345_pp0_iter6_reg <= icmp_ln1072_reg_345_pp0_iter5_reg;
        icmp_ln1072_reg_345_pp0_iter7_reg <= icmp_ln1072_reg_345_pp0_iter6_reg;
        icmp_ln1072_reg_345_pp0_iter8_reg <= icmp_ln1072_reg_345_pp0_iter7_reg;
        icmp_ln1072_reg_345_pp0_iter9_reg <= icmp_ln1072_reg_345_pp0_iter8_reg;
        or_ln487_reg_349_pp0_iter2_reg <= or_ln487_reg_349;
        or_ln487_reg_349_pp0_iter3_reg <= or_ln487_reg_349_pp0_iter2_reg;
        or_ln487_reg_349_pp0_iter4_reg <= or_ln487_reg_349_pp0_iter3_reg;
        or_ln487_reg_349_pp0_iter5_reg <= or_ln487_reg_349_pp0_iter4_reg;
        or_ln487_reg_349_pp0_iter6_reg <= or_ln487_reg_349_pp0_iter5_reg;
        or_ln487_reg_349_pp0_iter7_reg <= or_ln487_reg_349_pp0_iter6_reg;
        or_ln487_reg_349_pp0_iter8_reg <= or_ln487_reg_349_pp0_iter7_reg;
        or_ln487_reg_349_pp0_iter9_reg <= or_ln487_reg_349_pp0_iter8_reg;
        ret_reg_374 <= ret_fu_238_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln1072_reg_345 <= icmp_ln1072_fu_171_p2;
        or_ln487_reg_349 <= or_ln487_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter10_affected_mid_V_2_reg_145 <= ap_phi_reg_pp0_iter9_affected_mid_V_2_reg_145;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_affected_mid_V_2_reg_145 <= ap_phi_reg_pp0_iter0_affected_mid_V_2_reg_145;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter3_affected_mid_V_2_reg_145 <= ap_phi_reg_pp0_iter2_affected_mid_V_2_reg_145;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter4_affected_mid_V_2_reg_145 <= ap_phi_reg_pp0_iter3_affected_mid_V_2_reg_145;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter5_affected_mid_V_2_reg_145 <= ap_phi_reg_pp0_iter4_affected_mid_V_2_reg_145;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter6_affected_mid_V_2_reg_145 <= ap_phi_reg_pp0_iter5_affected_mid_V_2_reg_145;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter7_affected_mid_V_2_reg_145 <= ap_phi_reg_pp0_iter6_affected_mid_V_2_reg_145;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter8_affected_mid_V_2_reg_145 <= ap_phi_reg_pp0_iter7_affected_mid_V_2_reg_145;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter9_affected_mid_V_2_reg_145 <= ap_phi_reg_pp0_iter8_affected_mid_V_2_reg_145;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op55_read_state10 == 1'b1))) begin
        l1_addr_read_reg_369 <= m_axi_l1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1068_reg_379 == 1'd0))) begin
        out_args_fu_80 <= out_args_2_fu_273_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln487_fu_181_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln487_reg_349_pp0_iter9_reg == 1'd1) & (icmp_ln1072_reg_345_pp0_iter9_reg == 1'd0))) begin
        ap_phi_mux_affected_mid_V_2_phi_fu_148_p4 = affected_mid_V_1_fu_231_p2;
    end else begin
        ap_phi_mux_affected_mid_V_2_phi_fu_148_p4 = ap_phi_reg_pp0_iter10_affected_mid_V_2_reg_145;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op48_readreq_state3 == 1'b1))) begin
        l1_blk_n_AR = m_axi_l1_ARREADY;
    end else begin
        l1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op55_read_state10 == 1'b1))) begin
        l1_blk_n_R = m_axi_l1_RVALID;
    end else begin
        l1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op48_readreq_state3 == 1'b1))) begin
        m_axi_l1_ARVALID = 1'b1;
    end else begin
        m_axi_l1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op55_read_state10 == 1'b1))) begin
        m_axi_l1_RREADY = 1'b1;
    end else begin
        m_axi_l1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln1068_reg_379 == 1'd0))) begin
        task_out_TDATA_blk_n = task_out_TREADY;
    end else begin
        task_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1068_reg_379 == 1'd0))) begin
        task_out_TVALID = 1'b1;
    end else begin
        task_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign CSC_position_V_4_fu_192_p2 = (CSC_position_V_1_fu_72 + 32'd1);

assign CSR_position_V_4_fu_209_p2 = (CSR_position_V_1_fu_76 + 32'd1);

assign add_ln232_fu_187_p2 = (base_reverse_edge_id_V_load + CSC_position_V_1_fu_72);

assign affected_mid_V_1_fu_231_p2 = (shl_ln229_fu_226_p2 | 32'd1);

assign affected_mid_V_fu_203_p2 = CSR_position_V_1_fu_76 << 32'd1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter11 == 1'b1) & (icmp_ln1068_reg_379 == 1'd0) & (task_out_TREADY == 1'b0)) | ((m_axi_l1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (ap_predicate_op55_read_state10 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter11 == 1'b1) & ((1'b1 == ap_block_state12_io) | ((icmp_ln1068_reg_379 == 1'd0) & (task_out_TREADY == 1'b0)))) | ((m_axi_l1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (ap_predicate_op55_read_state10 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter11 == 1'b1) & ((1'b1 == ap_block_state12_io) | ((icmp_ln1068_reg_379 == 1'd0) & (task_out_TREADY == 1'b0)))) | ((m_axi_l1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (ap_predicate_op55_read_state10 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter9 = ((m_axi_l1_RVALID == 1'b0) & (ap_predicate_op55_read_state10 == 1'b1));
end

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((icmp_ln1068_reg_379 == 1'd0) & (task_out_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state12_pp0_stage0_iter11 = ((icmp_ln1068_reg_379 == 1'd0) & (task_out_TREADY == 1'b0));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((m_axi_l1_ARREADY == 1'b0) & (ap_predicate_op48_readreq_state3 == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_303 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_490 = ((icmp_ln1072_fu_171_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (or_ln487_fu_181_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_494 = ((icmp_ln1072_fu_171_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (or_ln487_fu_181_p2 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter0_affected_mid_V_2_reg_145 = 'bx;

always @ (*) begin
    ap_predicate_op48_readreq_state3 = ((icmp_ln1072_reg_345 == 1'd0) & (or_ln487_reg_349 == 1'd1));
end

always @ (*) begin
    ap_predicate_op55_read_state10 = ((icmp_ln1072_reg_345_pp0_iter8_reg == 1'd0) & (or_ln487_reg_349_pp0_iter8_reg == 1'd1));
end

assign icmp_ln1068_fu_242_p2 = ((ap_phi_mux_affected_mid_V_2_phi_fu_148_p4 == reverse_mid_V) ? 1'b1 : 1'b0);

assign icmp_ln1072_1_fu_176_p2 = ((CSC_position_V_1_fu_72 < CSC_end_V) ? 1'b1 : 1'b0);

assign icmp_ln1072_fu_171_p2 = ((CSR_position_V_1_fu_76 < CSR_end_V) ? 1'b1 : 1'b0);

assign m_axi_l1_ARADDR = add_ln232_reg_353;

assign m_axi_l1_ARBURST = 2'd0;

assign m_axi_l1_ARCACHE = 4'd0;

assign m_axi_l1_ARID = 1'd0;

assign m_axi_l1_ARLEN = 32'd1;

assign m_axi_l1_ARLOCK = 2'd0;

assign m_axi_l1_ARPROT = 3'd0;

assign m_axi_l1_ARQOS = 4'd0;

assign m_axi_l1_ARREGION = 4'd0;

assign m_axi_l1_ARSIZE = 3'd0;

assign m_axi_l1_ARUSER = 1'd0;

assign m_axi_l1_AWADDR = 32'd0;

assign m_axi_l1_AWBURST = 2'd0;

assign m_axi_l1_AWCACHE = 4'd0;

assign m_axi_l1_AWID = 1'd0;

assign m_axi_l1_AWLEN = 32'd0;

assign m_axi_l1_AWLOCK = 2'd0;

assign m_axi_l1_AWPROT = 3'd0;

assign m_axi_l1_AWQOS = 4'd0;

assign m_axi_l1_AWREGION = 4'd0;

assign m_axi_l1_AWSIZE = 3'd0;

assign m_axi_l1_AWUSER = 1'd0;

assign m_axi_l1_AWVALID = 1'b0;

assign m_axi_l1_BREADY = 1'b0;

assign m_axi_l1_WDATA = 32'd0;

assign m_axi_l1_WID = 1'd0;

assign m_axi_l1_WLAST = 1'b0;

assign m_axi_l1_WSTRB = 4'd0;

assign m_axi_l1_WUSER = 1'd0;

assign m_axi_l1_WVALID = 1'b0;

assign or_ln487_fu_181_p2 = (icmp_ln1072_fu_171_p2 | icmp_ln1072_1_fu_176_p2);

assign out_args_2_fu_273_p3 = {{tmp_s_fu_263_p4}, {affected_mid_V_2_reg_145}};

assign ret_fu_238_p1 = ap_phi_mux_affected_mid_V_2_phi_fu_148_p4[0:0];

assign reverse_affected_mid_fu_257_p2 = (select_ln498_fu_250_p3 + affected_mid_V_2_reg_145);

assign select_ln498_fu_250_p3 = ((ret_reg_374[0:0] == 1'b1) ? 32'd4294967295 : 32'd1);

assign shl_ln229_fu_226_p2 = l1_addr_read_reg_369 << 32'd1;

assign task_out_TDATA = {{{{{tmp_s_fu_263_p4}, {affected_mid_V_2_reg_145}}, {8'd0}}, {reverse_affected_mid_fu_257_p2}}, {task_out_temp_ts_V_7}};

assign tmp_s_fu_263_p4 = {{out_args_fu_80[127:32]}};

endmodule //rbp_hls_rbp_hls_Pipeline_VITIS_LOOP_487_6
